How servlets are requested?
	There are several possibilities under which a request can be made to a servlet.
		1. Typing the URL of the servlet in the browser's address bar.
		2. Using HTML anchor tag. <a href...>
			In this case also HTTP GET request is made.
		3. Using HTML Form
				In this case, in order to link the HTML Form with the servlet, 'action' attribute of <form> tag is to be
				used. Its value must be the Servlet's URL excluding '/'.
				
HTML Form Processing:
	In any real time web based application, data is accepted from end user via HTML Form. That data is sent towards
	server and needs to be processed as per the requirement. This technique is called as HTML Form Processing.
	
	E.g.
		User validation against username and password.
		User Registration against user specific information.
		
		When a request is made from HTML Form to some servlet, typically some information is sent towards servlet.
		This depends upon the requirement. Once the data arrives on server side, it needs to be captured for further
		processing.
		
		This is done using an object of type: 'HttpServletRequest' interface.
		It holds data in the form of name-value pairs where both of them are Strings.
		This interface provides 'String getParameter(String)' method.
		
		The receiving parameter indicates parameter name and the return value indicates parameter value.
		
		While processing HTML form, the user might have entered some sensitive or confidential information.
		E.g.
			User Credentials
			Bank Account Details
			Credit Card Details
			
			By default, since the type of HTTP request is GET, this information is always appended to the URL.
			This results into security implications.
			
			To avoid this, HTTP POST request is used. In this case, the information is not appended to the URL; rather
			it is sent as a pay load (along with the page body).
			
			How to make POST request?
				To make POST request using HTML Form, use the 'method' attribute of '<form>' tag with value set to
				'POST'.
		
			How to handle POST request?
				When the request comes on server side, in the servlet, it is handled using 'doPost()' method.
		
		GET Vs POST
			1. In GET request, parameters are appended to URL whereas in POST, they are sent along with page body.
			2. In GET, there is a limitation on data transfer (Up to 8KB) whereas in POST, there is no any limitation.
			3. In GET, there is a limitation on URL length (Up to 255 chars) whereas in POST, there is no any limitation.
			
		GET:
			1. Generally used to access static resources e.g. HTML
			2. Always gets used if the URL is entered in browser's address bar or used via HTML's anchor tag.
			
		POST:
			1. Generally used for Form Processing
			2. File Uploads
			
JSP:
	JSP stands for Java Server Pages.
	It is a web component used to extend the functionality of web server.
	It runs on server side and can be used to generate dynamic web contents.
	
	All JSPs are written using a file called as JSP file.
	All JSP files have .jsp extension
	
	Why JSP?
		When developing any web application, the logic of the application is mainly divided into 2 types:
			1. Processing Logic or Business Logic
			2. Presentation Logic
			
		When the requirement of Presentation Logic goes on increasing, handling the same using Servlet becomes
		difficult. In fact, those who are from web designing background, may not have proper Java knowledge and
		it is a pre-requisite for servlets.
		
		This problem can be resolved using JSP. 
		It looks more like HTML and less like Java. Rather it may not contain Java code at all.
		
	Life Cycle of JSP:
		There are 3 stages involved in JSPs life cycle:
			1. Instantiation and Initialization
			2. Service
			3. Destroy
			
		To handle the life cycle, there are 3 life cycle methods available:
			1. jspInit()
			2. _jspService()
			3. jspDestroy()
			
		1. Instantiation and Initialization
			When the JSP is requested for the very 1st time, web container loads the page.
			Once the page is loaded, it is converted into Servlet. This phase is called as Translation.
			Whatever Java class is required to create this servlet is generated by Web Container.
			This means, JSP is an abstraction (wrapper) on the top of servlet.
			Once the translation is done, web container instantiates this servlet specific class and invokes 
			'jspInit()' method.
			After that, web container invokes '_jspService()' method.
		
		2. Service
				This stage is encountered when the JSP is requested every time. Web Container invokes '_jspService()'
				every time when the request is made.
				
		3. Destroy
				This stage is encountered with the web server is stopped or even the application is undeployed.
				Web Container invokes 'jspDestroy()' method this time.
				
		JSP File Code Structure:
			In a JSP file, there are 3 types of code possible:
				1. HTML Tags
				2. Java Code
				3. JSP Tags
				
			JSP Tags:
				JSP Tags are of 3 types:
					1. Directives
					2. Scripting Elements
					3. Standard Actions
					
				1. Directives:
						They are denoted by '<%@ ...... %> delimiters.
						They are of 3 types:
							a) page
							b) include
							c) taglib
							
						a) page:
								It is used to configure JSP page.
								It has several possible attributes.
									E.g.
										language, import, contentType, isThreadSafe, errorPage, isErrorPage and so on.
										language:
											Used to specify scripting language of the page.
											If omitted, it defaults to 'java' and if used, it can have only 1 possible value: 'java'
											
										import:
											Used to import any public declarations from any package other than 'java.lang'
											
										contentType:
											Used to specify MIME type of the content to be delivered in the response.
											
										isThreadSafe:
											Used to specify whether the page is to be made thread-safe or not.
											It is exactly opposite to the thread-safety concept of multithreading.
											It can hold a value true or false but it defaults to true.
											
										errorPage:
											Used to divert the control to some other JSP page if the current JSP page contains
											some Java code which fires an UNCHECKED exception.
											
										isErrorPage:
											Used to configure the page as an error page so that it can make use of predefined
											JSP object known as 'exception'
											
											It can be set to true or false. It defaults to false.
											
						b) include:
								It is used to include resources like HTML, JSP or plain text file in JSP.
								It has a single attribute named as 'file' which indicates the filename.
								
						c) taglib:
								It is used while building user defined tags.	
								
				2. Scripting Elements:
						These are associated with Java code in JSP.
						They are of 3 types:
							a) Declaration
							b) Scriptlet
							c) Expression
						
						Declaration:
							It is used to declare variables and define methods.
							It is denoted by '<%! ..... %> delimiters.
							Whatever declarations or definitions are made using this section are processed directly
							at the servlet specific class level which is generated by Web Container.
							
						Scriptlet:
							It is used to write any valid Java code.
							It is denoted by '<% .......... %>' delimiters.		
							Whatever Java code is written inside Scriptlet, it gets processed within the _jspService()
							method of the servlet class which is generated by Web Container.
							Therefore if a variable is declared using Scriptlet, it becomes local variable to that method.
							However, it is not possible to define a method within a Scriptlet because a method cannot have
							another method definition.
							
						Expression:
							It is used to fetch the value of the variable or even in case of method that returns some value.
							It is denoted by '<%=<EXPRESSION>%>' delimiters.
							
				3. Standard Actions:
						These are the actions used to perform some specific task.
						All JSP standard actions follow a common format: <prefix:suffix> where 'prefix' is always 'jsp'
						and 'suffix' is the actual tag name.
						
						a) <jsp:useBean>
								Allows to instantiate some Java Bean (Java Class)
								This is possible by using its relevant attributes.
								E.g.
								<jsp:useBean class="zomato.Restaurant" id="r1"/>
								
								The above statement creates an object of class: Restaurant that belongs to package: zomato
								and it is referred by name: r1.
								
								The equivalent Java code for the above fragment will be:
									zomato.Restaurant r1 = new zomato.Restaurant();
								
								This standard action can create the object but that object holds default values.
								To customize them designer can write a Java code using scriptlet but this can be 
								avoided using 2nd standard action.
								
						b) <jsp:setProperty>
								Used to set values for the properties of the bean using setter methods.
								E.g.
									<jsp:useBean class="zomato.Restaurant" id="r1"/>
									<jsp:setProperty name="r1" property="cuisine"/>
									The above code is setting the value for 'cuisine' property of bean: r1
									
									It is also possible to set all the properties simultaneously.
									E.g.
									<jsp:setProperty name="r1" property="*"/>
								
								Once the values have been set for the bean properties, at any time they can be retrieved
								back. This is done using the 3rd standard action.
								
						 c) <jsp:getProperty>
						 		Unlike 'setProperty', it does not work for all properties simultaneously.
						 		E.g.
						 			<jsp:getProperty name="r1" property="cuisine"/>
						 			<jsp:getProperty name="r1" property="branchCount"/>
						 		
						 		It makes use of getter methods internally.
						 		
						Bean Scopes:
							The bean that is instantiated using 'useBean' can be within one of the several possible scopes.
							The scope is specified using 'scope' attribute of 'useBean'.
							It can have following possible values:
								a) page [Default]
								b) request
								c) session
								d) application
								
								
				How values are set for the bean?
					When using 'property = *' for '<setProperty>' standard action, web container identifies the names
					of the fields of the bean class and matches them with the names of the request parameters.
					
					Once the match is found, web container searches for the relevant setter method having naming
					conventions followed. Once the method is found, it calls that method.
					
					Whatever type conversion is required, is also managed by Web Container.
					
			
			
			
				
			
				
			
						
							
			
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		